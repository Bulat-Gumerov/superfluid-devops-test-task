name: Build & deploy Superfluid Sentinel to AWS ECS

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4.1.1
      with:
        images: ${{ env.TAG_BASE }}
        tags: |
          type=raw,value={{branch}}-{{sha}}-{{date 'X'}},enable=${{ startsWith(github.ref, 'refs/heads') }}
          type=semver,pattern={{version}},prefix=v
          type=raw,value={{branch}},enable=${{ startsWith(github.ref, 'refs/heads') }}
          type=semver,pattern={{major}}.{{minor}},prefix=v
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v3.2.0
      with:
        context: .
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
  
  deploy:
    name: Deploy to staging
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: my-container
          image: ${{ needs.build.outputs.version }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          service: superfluid-sentinel
          cluster: superfluid-cluster
          wait-for-service-stability: true

      - name: Notify on failure
        if: failure()
        run: |
          echo "Superfluid Sentinel deployment to AWS ECS failed!" | telegram-send -c <TELEGRAM_CI_CHANNEL>
